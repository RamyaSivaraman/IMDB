package dbms.imdb;

import java.util.List;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Ramya Sivaraman
 */
public class Hw3GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public Hw3GUI() {
        initComponents();
        
        DefaultListModel dlm = new DefaultListModel();
        //  Connection myDbConn = getDBConnection();
        ArrayList<String> genereList = getGenereList(myDbConn);
        
        for (int i = 0; i < genereList.size(); i++) {
            dlm.addElement(genereList.get(i));
        }
        jList1.setModel(dlm);
        jList2.setModel(dlm2);
        jList3.setModel(dlm3);
        jList4.setModel(dlm4);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList<>();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jYearChooser2 = new com.toedter.calendar.JYearChooser();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton3 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Genres");

        jScrollPane1.setViewportView(jList1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Country");

        jScrollPane2.setViewportView(jList2);

        jButton1.setText("Select Genre");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Cast");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Actor / Actress");

        jScrollPane3.setViewportView(jList3);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Director");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(jList4);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Execute Query");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText(" Type or choose");

        jLabel8.setText(" Type or choose");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane6.setViewportView(jTextArea2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        jLabel7.setText("Choose AND/OR");

        jLabel9.setText(" Query");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Rating");

        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel11.setText(" Type Value");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("No. of Ratings");

        jComboBox3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<", "<=", ">=" }));

        jLabel13.setText(" Type Value");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Movie Year");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("FROM");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("TO");

        jYearChooser1.setStartYear(0);
        jYearChooser1.setValue(0);

        jYearChooser2.setStartYear(0);
        jYearChooser2.setValue(0);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel17.setText("USER RATINGS");

        jLabel18.setText("User ID:");

        jLabel19.setText("FROM");

        jLabel20.setText("TO");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel21.setText("Ratings");

        jComboBox4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<", "<=", ">=" }));
        jComboBox4.setToolTipText("");
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jLabel22.setText("VALUE");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jDateChooser1.setDateFormatString("yyyy-MM-dd");

        jDateChooser2.setDateFormatString("yyyy-MM-dd");

        jButton3.setText("SUBMIT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel23.setText("RESULT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)))
                .addGap(202, 202, 202)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(685, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField3)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jComboBox2, 0, 87, Short.MAX_VALUE)
                                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jTextField2))
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel12)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel16))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jYearChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addGap(251, 251, 251))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addComponent(jLabel22))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                            .addComponent(jScrollPane3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(34, 34, 34)
                                                .addComponent(jLabel15))
                                            .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jYearChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jLabel7)
                                .addGap(32, 32, 32)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(122, 122, 122))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel13))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel18))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel19))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel20)
                                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(34, 34, 34)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if (!jList1.getSelectedValuesList().isEmpty()) {
            jTextArea2.setText("");
            CountryList.clear();
            CountryList = getCountryList(myDbConn);
            
            dlm2.removeAllElements();
            for (int i = 0; i < CountryList.size(); i++) {
                dlm2.addElement(CountryList.get(i));
            }
            
            ActorList.clear();
            ActorList = getActorList(myDbConn);
            
            dlm3.removeAllElements();
            for (int i = 0; i < ActorList.size(); i++) {
                dlm3.addElement(ActorList.get(i));
            }
            
            DirectorList.clear();
            DirectorList = getDirectorList(myDbConn);
            
            dlm4.removeAllElements();
            for (int i = 0; i < DirectorList.size(); i++) {
                dlm4.addElement(DirectorList.get(i));
            }
            
            min_year = getminyear(myDbConn);
            jYearChooser1.setYear(min_year);
            
            max_year = getmaxyear(myDbConn);
            jYearChooser2.setYear(max_year);
            
            jTextArea1.setText(genrebuttonquery);
            genrebuttonquery = "";
        } else {
            jTextArea2.setText("Please select genre");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        if (jComboBox1.getSelectedItem().equals("AND")) {
            try {
                List<String> actorList = new ArrayList<String>();
                List<String> directorList = new ArrayList<String>();
                String selectquery = "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum"
                        + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                        + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id "
                        + " AND  G.GENRE IN(" + getstrfromList(jList1.getSelectedValuesList()) + ")";

                //Checking Country
                if (!jList2.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " AND C.COUNTRY IN (" + getstrfromList(jList2.getSelectedValuesList()) + " ) ";
                }
                //Checking Actor List
                if (!jList3.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " AND ( A.ACTORNAME IN (" + getstrfromList(jList3.getSelectedValuesList()) + " ) ";
                }
                //Checking Actor Text Box
                if (jTextField1.getText() != null && !jTextField1.getText().isEmpty()) {
                    selectquery = selectquery + "  AND " + " (A.ACTORNAME = " + " '" + handleSpecialCharacter(jTextField1.getText()) + "')";
                } else if (!jList3.getSelectedValuesList().isEmpty()) { //if list is not empty we need to add aditional closing bracket
                    selectquery = selectquery + ")";
                }
                //if list is not empty and text is not empty we need to add aditional closing bracket .
                if (!jList3.getSelectedValuesList().isEmpty() && (jTextField1.getText() != null && !jTextField1.getText().isEmpty())) {                    
                    selectquery = selectquery + ")";
                }
                if (!jList4.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " AND ( D.DIRECTORNAME IN (" + getstrfromList(jList4.getSelectedValuesList()) + " ) ";
                }
                if (jTextField3.getText() != null && !jTextField3.getText().isEmpty()) {
                    selectquery = selectquery + " AND " + "( D.DIRECTORNAME = " + " '" + handleSpecialCharacter(jTextField3.getText()) + "')";
                } else if (!jList4.getSelectedValuesList().isEmpty()) { //if list is not empty we need to add aditional closing bracket
                    selectquery = selectquery + ")";
                }
                //if list is not empty and text is not empty we need to add aditional closing bracket .
                if (!jList4.getSelectedValuesList().isEmpty() && (jTextField3.getText() != null && !jTextField3.getText().isEmpty())) {                    
                    selectquery = selectquery + ")";
                }
                
                if (jTextField2.getText() != null && !jTextField2.getText().isEmpty()) {
                    if (jComboBox2.getSelectedItem().equals("=")) {
                        selectquery = selectquery + " AND ((M.rtarating + M.rttrating + M.rtaudirating)/3) = " + Double.parseDouble(jTextField2.getText()) ;
                    } else if (jComboBox2.getSelectedItem().equals("<")) {
                        selectquery = selectquery + " AND ((M.rtarating + M.rttrating + M.rtaudirating)/3) < " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals("<=")) {
                        selectquery = selectquery + " AND ((M.rtarating + M.rttrating + M.rtaudirating)/3) <= " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals(">")) {
                        selectquery = selectquery + " AND ((M.rtarating + M.rttrating + M.rtaudirating)/3) > " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals(">=")) {
                        selectquery = selectquery + " AND ((M.rtarating + M.rttrating + M.rtaudirating)/3) >= " + Double.parseDouble(jTextField2.getText());
                    }
                }
                
                if (jTextField4.getText() != null && !jTextField4.getText().isEmpty()) {
                    if (jComboBox3.getSelectedItem().equals("=")) {
                        selectquery = selectquery + " AND ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) = " + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals("<")) {
                        selectquery = selectquery + " AND ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) < " + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals("<=")) {
                        selectquery = selectquery + " AND ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) <= " + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals(">")) {
                        selectquery = selectquery + " AND ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) >" + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals(">=")) {
                        selectquery = selectquery + " AND ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) >=" + Double.parseDouble(jTextField4.getText());
                    }
                }
                
                if (jYearChooser1.getYear() != 0) {
                    selectquery = selectquery + " AND " + "M.Year > = " + jYearChooser1.getYear();
                }
                
                if (jYearChooser2.getYear() != 0) {
                    selectquery = selectquery + " AND " + "M.Year < = " + jYearChooser2.getYear();
                }

                // if (!jYearChooser1.getYear().isEmpty() && !jYearChooser1.getYear().isEmpty())
                jTextArea1.setText("");
                jTextArea1.setText(selectquery);
                
                Statement stmt = myDbConn.createStatement();
                System.out.println(selectquery);
                ResultSet rs = stmt.executeQuery(selectquery);
                
                boolean searchEmpty = true;
                // int a = 1;
                //if (rs!= null) {

                jTextArea2.setText("");
                while (rs.next()) {
                    searchEmpty = false;
                    jTextArea2.append("\n");
                    jTextArea2.append(rs.getString(1) + "  ");
                    jTextArea2.append(rs.getString(2) + "  ");
                    jTextArea2.append(rs.getString(3) + "  ");
                    jTextArea2.append(rs.getString(4) + "  ");
                    jTextArea2.append(rs.getInt(5) + "" + "  ");
                    jTextArea2.append(rs.getInt(6) + "" + "  ");
                    jTextArea2.append(rs.getInt(7) + "" + "  ");
                    jTextArea2.append(rs.getInt(8) + "" + "  ");
                    
                }
                //  searchEmpty = false;

                //  }
                if (searchEmpty) {
                    jTextArea2.setText("The Selected Combination does not provide a result");
                }
            } catch (SQLException e) {
                jTextArea2.setText("Please Select atleast Genre.");
                //  e.printStackTrace();
            }
        } /*else if (jComboBox1.getSelectedItem().equals("OR")) {

            try {
                List<String> actorList = new ArrayList<String>();
                List<String> directorList = new ArrayList<String>();
                String selectquery = "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum "
                        + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                        + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  "
                        + " AND G.GENRE IN(" + getstrfromList(jList1.getSelectedValuesList()) + ")";

                //Checking Country
                if (!jList2.getSelectedValuesList().isEmpty()) {

                    selectquery = selectquery + " UNION "
                            + "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum"
                            + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                            + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id   AND  C.COUNTRY IN (" + getstrfromList(jList2.getSelectedValuesList()) + " ) ";
                }
                //Checking Actor List
                if (!jList3.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " UNION "
                            + "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum"
                            + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                            + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id AND ( A.ACTORNAME IN (" + getstrfromList(jList3.getSelectedValuesList()) + " ) ";
                }
                //Checking Actor Text Box
                if (jTextField1.getText() != null && !jTextField1.getText().isEmpty()) {
                    selectquery = selectquery + "  UNION "
                            + "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum"
                            + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                            + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + " (A.ACTORNAME = " + " '" + jTextField1.getText() + "')";
                } else if (!jList3.getSelectedValuesList().isEmpty()) { //if list is not empty we need to add aditional closing bracket
                    selectquery = selectquery + ")";
                }

                if (!jList4.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " UNION"
                            + "  SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum "
                            + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                            + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND ( D.DIRECTORNAME IN (" + getstrfromList(jList4.getSelectedValuesList()) + " ) ";
                }
                if (jTextField3.getText() != null && !jTextField3.getText().isEmpty()) {
                    selectquery = selectquery + "  UNION"
                            + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                            + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                            + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + "( D.DIRECTORNAME = " + " '" + jTextField3.getText() + "')";
                } else if (!jList4.getSelectedValuesList().isEmpty()) { //if list is not empty we need to add aditional closing bracket
                    selectquery = selectquery + ")";
                }

                if (jTextField2.getText() != null && !jTextField2.getText().isEmpty()) {
                    if (jComboBox2.getSelectedItem().equals("=")) {
                        selectquery = selectquery + "   UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField2.getText()) + " = ( M.rtarating + M.rttrating + M.rtaudirating)/3 ";
                    } else if (jComboBox2.getSelectedItem().equals("<")) {
                        selectquery = selectquery + "   UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField2.getText()) + " < ( M.rtarating + M.rttrating + M.rtaudirating)/3 ";
                    } else if (jComboBox2.getSelectedItem().equals("<=")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField2.getText()) + " <= ( M.rtarating + M.rttrating + M.rtaudirating)/3 ";
                    } else if (jComboBox2.getSelectedItem().equals(">")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField2.getText()) + " > ( M.rtarating + M.rttrating + M.rtaudirating)/3 ";
                    } else if (jComboBox2.getSelectedItem().equals(">=")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField2.getText()) + " >= ( M.rtarating + M.rttrating + M.rtaudirating)/3 ";
                    }
                }

                if (jTextField4.getText() != null && !jTextField4.getText().isEmpty()) {
                    if (jComboBox3.getSelectedItem().equals("=")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField4.getText()) + " = ( M.RTAREV+M.RTTREV+M.RTAUDINUM)/3 ";
                    } else if (jComboBox3.getSelectedItem().equals("<")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField4.getText()) + " < ( M.RTAREV+M.RTTREV+M.RTAUDINUM)/3 ";
                    } else if (jComboBox3.getSelectedItem().equals("<=")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField4.getText()) + " <= ( M.RTAREV+M.RTTREV+M.RTAUDINUM)/3 ";
                    } else if (jComboBox3.getSelectedItem().equals(">")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField4.getText()) + " > ( M.RTAREV+M.RTTREV+M.RTAUDINUM)/3 ";
                    } else if (jComboBox3.getSelectedItem().equals(">=")) {
                        selectquery = selectquery + "  UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                                + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                                + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + Double.parseDouble(jTextField4.getText()) + " >= ( M.RTAREV+M.RTTREV+M.RTAUDINUM)/3 ";
                    }
                }

                if (jYearChooser1.getYear() != 0) {
                    selectquery = selectquery + "  UNION"
                            + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                            + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                            + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + "M.Year > = " + jYearChooser1.getYear();
                }

                if (jYearChooser2.getYear() != 0) {
                    selectquery = selectquery + "  UNION"
                            + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum FROM "
                            + "MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D , MOVIE M "
                            + "WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id  AND " + "M.Year < = " + jYearChooser2.getYear();
                }

                // if (!jYearChooser1.getYear().isEmpty() && !jYearChooser1.getYear().isEmpty())
                jTextArea1.setText("");
                jTextArea1.setText(selectquery);

                Statement stmt = myDbConn.createStatement();
                System.out.println(selectquery);
                ResultSet rs = stmt.executeQuery(selectquery);

                boolean searchEmpty = true;
                // int a = 1;
                //if (rs!= null) {

                jTextArea2.setText("");
                while (rs.next()) {
                    searchEmpty = false;
                    jTextArea2.append("\n");
                    jTextArea2.append(rs.getString(1) + "  ");
                    jTextArea2.append(rs.getString(2) + "  ");
                    jTextArea2.append(rs.getString(3) + "  ");
                    jTextArea2.append(rs.getString(4) + "  ");
                    jTextArea2.append(rs.getInt(5) + "" + "  ");
                    jTextArea2.append(rs.getInt(6) + "" + "  ");
                    jTextArea2.append(rs.getInt(7) + "" + "  ");
                    jTextArea2.append(rs.getInt(8) + "" + "  ");
                  
                }
                //  searchEmpty = false;

                //  }
                if (searchEmpty) {
                    jTextArea2.setText("The Selected Combination does not provide a result");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }

         */ else if (jComboBox1.getSelectedItem().equals("OR")) {
            try {
                List<String> actorList = new ArrayList<String>();
                List<String> directorList = new ArrayList<String>();
                String selectquery = "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum"
                        + " FROM MOVIE_COUNTRY C, MOVIE_GENRE G , MOVIE_ACTOR A, MOVIE_DIRECTOR D ,"
                        + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND A.MOVID = M.movie_id AND D.MOVID = M.movie_id "
                        + " AND ( G.GENRE IN(" + getstrfromList(jList1.getSelectedValuesList()) + ")";

                //Checking Country
                if (!jList2.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " OR C.COUNTRY IN (" + getstrfromList(jList2.getSelectedValuesList()) + " ) ";
                }
                //Checking Actor List
                if (!jList3.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " OR ( A.ACTORNAME IN (" + getstrfromList(jList3.getSelectedValuesList()) + " ) ";
                }
                //Checking Actor Text Box
                if (jTextField1.getText() != null && !jTextField1.getText().isEmpty()) {
                    selectquery = selectquery + "  OR " + " (A.ACTORNAME = " + " '" + handleSpecialCharacter(jTextField1.getText()) + "')";
                } else if (!jList3.getSelectedValuesList().isEmpty()) { //if list is not empty we need to add aditional closing bracket
                    selectquery = selectquery + ")";
                }
                //if list is not empty and text is not empty we need to add aditional closing bracket .
                if (!jList3.getSelectedValuesList().isEmpty() && (jTextField1.getText() != null && !jTextField1.getText().isEmpty())) {                    
                    selectquery = selectquery + ")";
                }
                if (!jList4.getSelectedValuesList().isEmpty()) {
                    selectquery = selectquery + " OR ( D.DIRECTORNAME IN (" + getstrfromList(jList4.getSelectedValuesList()) + " ) ";
                }
                if (jTextField3.getText() != null && !jTextField3.getText().isEmpty()) {
                    selectquery = selectquery + " OR " + "( D.DIRECTORNAME = " + " '" + handleSpecialCharacter(jTextField3.getText()) + "')";
                } else if (!jList4.getSelectedValuesList().isEmpty()) { //if list is not empty we need to add aditional closing bracket
                    selectquery = selectquery + ")";
                }
                //if list is not empty and text is not empty we need to add aditional closing bracket .
                if (!jList4.getSelectedValuesList().isEmpty() && (jTextField3.getText() != null && !jTextField3.getText().isEmpty())) {                    
                    selectquery = selectquery + ")";
                }
                
                if (jTextField2.getText() != null && !jTextField2.getText().isEmpty()) {
                    if (jComboBox2.getSelectedItem().equals("=")) {
                        selectquery = selectquery + " OR ((M.rtarating + M.rttrating + M.rtaudirating)/3) = " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals("<")) {
                        selectquery = selectquery + " OR ((M.rtarating + M.rttrating + M.rtaudirating)/3) < " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals("<=")) {
                        selectquery = selectquery + " OR ((M.rtarating + M.rttrating + M.rtaudirating)/3) <= " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals(">")) {
                        selectquery = selectquery + " OR ((M.rtarating + M.rttrating + M.rtaudirating)/3) > " + Double.parseDouble(jTextField2.getText());
                    } else if (jComboBox2.getSelectedItem().equals(">=")) {
                        selectquery = selectquery + " OR ((M.rtarating + M.rttrating + M.rtaudirating)/3) >= " + Double.parseDouble(jTextField2.getText());
                    }
                }
                
                if (jTextField4.getText() != null && !jTextField4.getText().isEmpty()) {
                    if (jComboBox3.getSelectedItem().equals("=")) {
                        selectquery = selectquery + " OR ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) = " + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals("<")) {
                        selectquery = selectquery + " OR ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) < " + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals("<=")) {
                        selectquery = selectquery + " OR ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) <=" + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals(">")) {
                        selectquery = selectquery + " OR ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) > " + Double.parseDouble(jTextField4.getText());
                    } else if (jComboBox3.getSelectedItem().equals(">=")) {
                        selectquery = selectquery + " OR ((M.RTAREV+M.RTTREV+M.RTAUDINUM)/3) >=" + Double.parseDouble(jTextField4.getText());
                    }
                }
                
                if (jYearChooser1.getYear() != 0) {
                    selectquery = selectquery + " OR " + "M.Year >= " + jYearChooser1.getYear();
                }
                
                if (jYearChooser2.getYear() != 0) {
                    selectquery = selectquery + " OR " + "M.Year <= " + jYearChooser2.getYear();
                }
                
                selectquery = selectquery + ")";

                // if (!jYearChooser1.getYear().isEmpty() && !jYearChooser1.getYear().isEmpty())
                jTextArea1.setText("");
                jTextArea1.setText(selectquery);
                
                Statement stmt = myDbConn.createStatement();
                System.out.println(selectquery);
                ResultSet rs = stmt.executeQuery(selectquery);
                
                boolean searchEmpty = true;
                // int a = 1;
                //if (rs!= null) {

                jTextArea2.setText("");
                while (rs.next()) {
                    searchEmpty = false;
                    jTextArea2.append("\n");
                    jTextArea2.append(rs.getString(1) + "  ");
                    jTextArea2.append(rs.getString(2) + "  ");
                    jTextArea2.append(rs.getString(3) + "  ");
                    jTextArea2.append(rs.getString(4) + "  ");
                    jTextArea2.append(rs.getInt(5) + "" + "  ");
                    jTextArea2.append(rs.getInt(6) + "" + "  ");
                    jTextArea2.append(rs.getInt(7) + "" + "  ");
                    jTextArea2.append(rs.getInt(8) + "" + "  ");
                    
                }
                //  searchEmpty = false;

                //  }
                if (searchEmpty) {
                    jTextArea2.setText("The Selected Combination does not provide a result");
                }
            } catch (SQLException e) {
                jTextArea2.setText("Please Select Atleast Genre");
                // e.printStackTrace();
            }
        }        
        

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed

    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jComboBox1.getSelectedItem().equals("AND")) {
            try {
                if (jTextField5.getText() != null && !jTextField5.getText().isEmpty()) {
                    String selectquery = "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                            + " MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                            + " WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                            + " AND  U.USERID  = " + Integer.parseInt(jTextField5.getText());
                    
                    if (jTextField6.getText() != null && !jTextField6.getText().isEmpty()) {
                        if (jComboBox4.getSelectedItem().equals("=")) {
                            selectquery = selectquery + " AND " + Integer.parseInt(jTextField6.getText()) + " = U.Ratings";
                        } else if (jComboBox4.getSelectedItem().equals("<")) {
                            selectquery = selectquery + " AND U.Ratings < " + Integer.parseInt(jTextField6.getText());
                        } else if (jComboBox4.getSelectedItem().equals("<=")) {
                            selectquery = selectquery + " AND U.Ratings <= " + Integer.parseInt(jTextField6.getText());
                        } else if (jComboBox4.getSelectedItem().equals(">")) {
                            selectquery = selectquery + " AND U.Ratings > " + Integer.parseInt(jTextField6.getText());
                        } else if (jComboBox4.getSelectedItem().equals(">=")) {
                            selectquery = selectquery + " AND U.Ratings >=" + Integer.parseInt(jTextField6.getText());
                        }
                    }
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                    // String date1 = dateFormat.format(jDateChooser2.getDate());
                    if (jDateChooser1.getDate() != null) {
                        
                        String date = dateFormat.format(jDateChooser1.getDate());
                        System.out.println(date);
                        selectquery = selectquery + " AND " + "to_date((U.DATE_YEAR || '-' ||U.DATE_MONTH || '-' || U.DATE_DAY),'YYYY-MM-DD') >= to_date('" + date + "','YYYY-MM-DD')";
                    }
                    
                    if (jDateChooser2.getDate() != null) {
                        
                        String date1 = dateFormat.format(jDateChooser2.getDate());
                        selectquery = selectquery + " AND " + "to_date((U.DATE_YEAR || '-' ||U.DATE_MONTH || '-' || U.DATE_DAY),'YYYY-MM-DD') <= to_date('" + date1 + "','YYYY-MM-DD')";
                    }

                    // if (!jYearChooser1.getYear().isEmpty() && !jYearChooser1.getYear().isEmpty())
                    jTextArea1.setText("");
                    jTextArea1.setText(selectquery);
                    
                    Statement stmt = myDbConn.createStatement();
                    System.out.println(selectquery);
                    ResultSet rs = stmt.executeQuery(selectquery);
                    
                    boolean searchEmpty = true;
                    // int a = 1;
                    //if (rs!= null) {

                    jTextArea2.setText("");
                    while (rs.next()) {
                        searchEmpty = false;
                        jTextArea2.append("\n");
                        jTextArea2.append(rs.getString(1) + "  ");
                        jTextArea2.append(rs.getString(2) + "  ");
                        jTextArea2.append(rs.getString(3) + "  ");
                        jTextArea2.append(rs.getString(4) + "  ");
                        jTextArea2.append(rs.getInt(5) + "" + "  ");
                        jTextArea2.append(rs.getInt(6) + "" + "  ");
                        jTextArea2.append(rs.getInt(7) + "" + "  ");
                        jTextArea2.append(rs.getInt(8) + "  ");
                        jTextArea2.append(rs.getString(9) + "  ");
                        
                    }
                    //  searchEmpty = false;

                    //  }
                    if (searchEmpty) {
                        jTextArea2.setText("The Selected Combination does not provide a result");
                    }
                }
                
                else{
                   jTextArea2.setText("Please provide an USER ID");  
                }
                
            } catch (SQLException e) {
                e.printStackTrace();
               
             
            }
        } /*else if (jComboBox1.getSelectedItem().equals("OR")) {

            try {
                if (jTextField5.getText() != null && !jTextField5.getText().isEmpty()) {
                    String selectquery = "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                            + " MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                            + " WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                            + " AND  U.USERID  = " + Integer.parseInt(jTextField5.getText());

                    if (jTextField6.getText() != null && !jTextField6.getText().isEmpty()) {
                        if (jComboBox4.getSelectedItem().equals("=")) {
                            selectquery = selectquery + " UNION"
                                    + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                    + "  MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                    + "  WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                    + "  AND " + Integer.parseInt(jTextField6.getText()) + "= U.Ratings";
                        } else if (jComboBox4.getSelectedItem().equals("<")) {
                            selectquery = selectquery + " UNION"
                                    + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                    + "  MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                    + "  WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                    + "  AND " + Integer.parseInt(jTextField6.getText()) + "< U.Ratings";
                        } else if (jComboBox4.getSelectedItem().equals("<=")) {
                            selectquery = selectquery + " UNION"
                                    + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                    + "  MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                    + "  WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                    + " AND " + Integer.parseInt(jTextField6.getText()) + "<= U.Ratings";
                        } else if (jComboBox4.getSelectedItem().equals(">")) {
                            selectquery = selectquery + " UNION"
                                    + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                    + "  MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                    + "  WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                    + "  AND " + Integer.parseInt(jTextField6.getText()) + "> U.Ratings";
                        } else if (jComboBox4.getSelectedItem().equals(">=")) {
                            selectquery = selectquery + " UNION"
                                    + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                    + " MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                    + " WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                    + " AND " + Integer.parseInt(jTextField6.getText()) + ">= U.Ratings";
                        }
                    }
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                    // String date1 = dateFormat.format(jDateChooser2.getDate());
                    if (jDateChooser1.getDate() != null) {

                        String date = dateFormat.format(jDateChooser1.getDate());
                        System.out.println(date);
                        selectquery = selectquery + " UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                + "  MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                + "  WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                + "  AND " + "(U.DATE_YEAR || '-' ||U.DATE_MONTH || '-' || U.DATE_DAY) >= '" + date + "'";
                    }

                    if (jDateChooser2.getDate() != null) {

                        String date1 = dateFormat.format(jDateChooser2.getDate());
                        selectquery = selectquery + " UNION"
                                + " SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                                + "  MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                                + "  WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                                + "  AND " + "(U.DATE_YEAR || '-' ||U.DATE_MONTH || '-' || U.DATE_DAY) <= '" + date1 + "'";
                    }

                    // if (!jYearChooser1.getYear().isEmpty() && !jYearChooser1.getYear().isEmpty())
                    jTextArea1.setText("");
                    jTextArea1.setText(selectquery);

                    Statement stmt = myDbConn.createStatement();
                    System.out.println(selectquery);
                    ResultSet rs = stmt.executeQuery(selectquery);

                    boolean searchEmpty = true;
                    // int a = 1;
                    //if (rs!= null) {

                    jTextArea2.setText("");
                    while (rs.next()) {
                        searchEmpty = false;
                        jTextArea2.append("\n");
                        jTextArea2.append(rs.getString(1) + "  ");
                        jTextArea2.append(rs.getString(2) + "  ");
                        jTextArea2.append(rs.getString(3) + "  ");
                        jTextArea2.append(rs.getString(4) + "  ");
                        jTextArea2.append(rs.getInt(5) + "" + "  ");
                        jTextArea2.append(rs.getInt(6) + "" + "  ");
                        jTextArea2.append(rs.getInt(7) + "" + "  ");
                        jTextArea2.append(rs.getInt(8) + "  ");
                        jTextArea2.append(rs.getString(9) + "  ");

                    }
                    //  searchEmpty = false;

                    //  }
                    if (searchEmpty) {
                        jTextArea2.setText("The Selected Combination does not provide a result");
                    }
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }

        }

// TODO add your handling code here:
         */ else if (jComboBox1.getSelectedItem().equals("OR")) {
            try {
                if (jTextField5.getText() != null && !jTextField5.getText().isEmpty()) {
                    String selectquery = "SELECT DISTINCT M.Title, G.Genre, M.Year, C.Country,M.rtarating,M.rtaudirating, M.rtarev,M.rtaudinum, T.Tagtext FROM "
                            + " MOVIE_COUNTRY C, MOVIE_GENRE G , USER_RATINGS U ,MOVIE M , TAGS T, MOVIE_TAGS K "
                            + " WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id AND U.MovID = M.movie_id AND T.TagID = K.TagID AND K.MovID = M.movie_id"
                            + " AND ( U.USERID  = " + Integer.parseInt(jTextField5.getText());
                    
                    if (jTextField6.getText() != null && !jTextField6.getText().isEmpty()) {
                        if (jComboBox4.getSelectedItem().equals("=")) {
                            selectquery = selectquery + " OR " + Integer.parseInt(jTextField6.getText()) + "= U.Ratings";
                        } else if (jComboBox4.getSelectedItem().equals("<")) {
                            selectquery = selectquery + " OR U.Ratings < " + Integer.parseInt(jTextField6.getText());
                        } else if (jComboBox4.getSelectedItem().equals("<=")) {
                            selectquery = selectquery + " OR U.Ratings <= " + Integer.parseInt(jTextField6.getText());
                        } else if (jComboBox4.getSelectedItem().equals(">")) {
                            selectquery = selectquery + " OR U.Ratings > " + Integer.parseInt(jTextField6.getText());
                        } else if (jComboBox4.getSelectedItem().equals(">=")) {
                            selectquery = selectquery + " OR U.Ratings >= " + Integer.parseInt(jTextField6.getText());
                        }
                    }
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                    // String date1 = dateFormat.format(jDateChooser2.getDate());
                    if (jDateChooser1.getDate() != null) {
                        
                        String date = dateFormat.format(jDateChooser1.getDate());
                        System.out.println(date);
                        selectquery = selectquery + " OR " + "to_date((U.DATE_YEAR || '-' ||U.DATE_MONTH || '-' || U.DATE_DAY),'YYYY-MM-DD') >= to_date('" + date + "','YYYY-MM-DD')";
                    }
                    
                    if (jDateChooser2.getDate() != null) {
                        
                        String date1 = dateFormat.format(jDateChooser2.getDate());
                        selectquery = selectquery + " OR " + "to_date((U.DATE_YEAR || '-' ||U.DATE_MONTH || '-' || U.DATE_DAY),'YYYY-MM-DD') <= to_date('" + date1 + "','YYYY-MM-DD')";
                    }
                    
                    selectquery = selectquery + ")";

                    // if (!jYearChooser1.getYear().isEmpty() && !jYearChooser1.getYear().isEmpty())
                    jTextArea1.setText("");
                    jTextArea1.setText(selectquery);
                    
                    Statement stmt = myDbConn.createStatement();
                    System.out.println(selectquery);
                    ResultSet rs = stmt.executeQuery(selectquery);
                    
                    boolean searchEmpty = true;
                    // int a = 1;
                    //if (rs!= null) {

                    jTextArea2.setText("");
                    while (rs.next()) {
                        searchEmpty = false;
                        jTextArea2.append("\n");
                        jTextArea2.append(rs.getString(1) + "  ");
                        jTextArea2.append(rs.getString(2) + "  ");
                        jTextArea2.append(rs.getString(3) + "  ");
                        jTextArea2.append(rs.getString(4) + "  ");
                        jTextArea2.append(rs.getInt(5) + "" + "  ");
                        jTextArea2.append(rs.getInt(6) + "" + "  ");
                        jTextArea2.append(rs.getInt(7) + "" + "  ");
                        jTextArea2.append(rs.getInt(8) + "  ");
                        jTextArea2.append(rs.getString(9) + "  ");
                        
                    }
                    //  searchEmpty = false;

                    //  }
                    if (searchEmpty) {
                        jTextArea2.setText("The Selected Combination does not provide a result");
                    }
                }
                
                else{
                   jTextArea2.setText("Please provide an USER ID");  
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hw3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hw3GUI().setVisible(true);
            }
        });
    }
    
    public Connection getDBConnection() {
        try {
            
            Class.forName("oracle.jdbc.driver.OracleDriver");
            
        } catch (ClassNotFoundException e) {
            
            System.out.println("Where is your Oracle JDBC Driver?");
            e.printStackTrace();
        }
        System.out.println("Oracle JDBC Driver Registered!");
        
        Connection myConn = null;
        
        try {
            
            myConn = DriverManager.getConnection(
                    "jdbc:oracle:thin:@localhost:1521:orcl", "hr",
                    "hr");
        } catch (SQLException e) {
            
            System.out.println("Connection Failed! Check output console");
            e.printStackTrace();
        }
        
        return myConn;
    }
    
    public ArrayList<String> getGenereList(Connection conn) {
        
        ArrayList<String> genereList = new ArrayList<String>();
        
        try {
            
            String selectquery = "SELECT DISTINCT GENRE FROM MOVIE_GENRE";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(selectquery);
            // int a = 1;
            if (rs != null) {
                while (rs.next()) {
                    genereList.add(rs.getString(1));
                    //    a++;
                }
            }
        } catch (SQLException e) {
            
            e.printStackTrace();
        }
        return genereList;
    }
    
    public ArrayList<String> getCountryList(Connection conn) {
        
        ArrayList<String> CountryList = new ArrayList<String>();
        
        try {
            
            String selectquery = "SELECT DISTINCT COUNTRY FROM MOVIE_COUNTRY C, MOVIE_GENRE G ,"
                    + " MOVIE M WHERE G.MovID = M.movie_id AND C.MovID = M.movie_id"
                    + " AND  G.GENRE IN(" + getstrfromList(jList1.getSelectedValuesList()) + ")";
            
            Statement stmt = conn.createStatement();
            System.out.println(selectquery);
            genrebuttonquery = genrebuttonquery + selectquery + "\n";
            ResultSet rs = stmt.executeQuery(selectquery);

            // int a = 1;
            if (rs != null) {
                while (rs.next()) {
                    CountryList.add(rs.getString(1));
                    //    a++;
                }
            }
        } catch (SQLException e) {
            jTextArea2.setText("");
            jTextArea2.setText("Select one Genre before Submitting");
            //e.printStackTrace();
        }
        return CountryList;
    }
    
    public String getstrfromList(List<String> strList) {
        String str = "";
        
        for (int i = 0; i < strList.size(); i++) {
            str = str + "'" + handleSpecialCharacter(strList.get(i)) + "'";
            if (i < strList.size() - 1) {
                str = str + ",";
            }
        }
        
        return str;
        
    }

    /*
       public String getstr2fromList (List<String> strList)
            
    {
        String str="";
        
            for (int i = 0; i < strList.size(); i++) {
                str = str + "'" + strList.get(i) +"'";
               
                    str = str + ",";
                
            }
        
        return str;
        
        }*/
    public ArrayList<String> getActorList(Connection conn) {
        
        ArrayList<String> ActorList = new ArrayList<String>();
        
        try {
            
            String selectquery = "SELECT DISTINCT ACTORNAME FROM MOVIE_ACTOR A, MOVIE_GENRE G ,"
                    + " MOVIE M WHERE G.MovID = M.movie_id AND A.MovID = M.movie_id"
                    + " AND  G.GENRE IN(" + getstrfromList(jList1.getSelectedValuesList()) + ") ORDER BY 1";
            
            Statement stmt = conn.createStatement();
            System.out.println(selectquery);
            genrebuttonquery = genrebuttonquery + selectquery + "\n";
            ResultSet rs = stmt.executeQuery(selectquery);

            // int a = 1;
            if (rs != null) {
                while (rs.next()) {
                    ActorList.add(rs.getString(1));
                    //    a++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ActorList;
    }
    
    public ArrayList<String> getDirectorList(Connection conn) {
        
        ArrayList<String> DirectorList = new ArrayList<String>();
        
        try {
            
            String selectquery = "SELECT DISTINCT DIRECTORNAME FROM MOVIE_DIRECTOR D, MOVIE_GENRE G ,"
                    + " MOVIE M WHERE G.MovID = M.movie_id AND D.MovID = M.movie_id"
                    + " AND  G.GENRE IN(" + getstrfromList(jList1.getSelectedValuesList()) + ") ORDER BY 1";
            
            Statement stmt = conn.createStatement();
            System.out.println(selectquery);
            genrebuttonquery = genrebuttonquery + selectquery + "\n";
            ResultSet rs = stmt.executeQuery(selectquery);

            // int a = 1;
            if (rs != null) {
                while (rs.next()) {
                    DirectorList.add(rs.getString(1));
                    //    a++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return DirectorList;
    }
    
    public int getminyear(Connection conn) {
        
        int min_year = 0;
        
        try {
            
            String selectquery = "SELECT MIN(M.YEAR) FROM MOVIE M ORDER BY 1 ";
            
            Statement stmt = conn.createStatement();
            System.out.println(selectquery);
            genrebuttonquery = genrebuttonquery + selectquery + "\n";
            ResultSet rs = stmt.executeQuery(selectquery);

            // int a = 1;
            if (rs != null) {
                while (rs.next()) {
                    min_year = rs.getInt(1);
                    //    a++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return min_year;
    }
    
    public int getmaxyear(Connection conn) {
        
        int max_year = 0;
        
        try {
            
            String selectquery = "SELECT MAX(M.YEAR) FROM MOVIE M ORDER BY 1 ";
            
            Statement stmt = conn.createStatement();
            System.out.println(selectquery);
            genrebuttonquery = genrebuttonquery + selectquery + "\n";
            ResultSet rs = stmt.executeQuery(selectquery);

            // int a = 1;
            if (rs != null) {
                while (rs.next()) {
                    max_year = rs.getInt(1);
                    //    a++;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return max_year;
    }
    
    public static String handleSpecialCharacter(String str) {
        
        String changedStr = null;
        if (str != null && !str.isEmpty()) {
            changedStr = str;
            changedStr = str.replaceAll("'", "''");
        }
        
        return changedStr;
        
    }
    
    Connection myDbConn = getDBConnection();
    public static ArrayList<String> CountryList = new ArrayList<String>();
    public static ArrayList<String> ActorList = new ArrayList<String>();
    public static ArrayList<String> DirectorList = new ArrayList<String>();
    public static DefaultListModel dlm2 = new DefaultListModel();
    public static DefaultListModel dlm3 = new DefaultListModel();
    public static DefaultListModel dlm4 = new DefaultListModel();
    public static String genrebuttonquery = "";
    public static int min_year;
    public static int max_year;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private com.toedter.calendar.JYearChooser jYearChooser2;
    // End of variables declaration//GEN-END:variables
}
